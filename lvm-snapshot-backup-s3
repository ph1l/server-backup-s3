#!/bin/bash
#

set -euo pipefail
IFS=$'\n\t'

source ./libbashbackup.source

function lv_size()
{
    local vg_name=${1}
    local lv_name=${2}
    local size=$(
            lvs --noheadings --units B ${vg_name}/${lv_name} -o lv_size \
                | egrep -o '[0-9]+'
        )
    log 2 "got size ${size}B for ${vg_name}/${lv_name}"
    echo ${size}
}

function lv_make_snap()
{
    local vg_name=${1}
    local lv_name=${2}
    local alloc_percent=10
    local lv_size=$(lv_size ${vg_name} ${lv_name})
    local snap_alloc=$((
            ((((${lv_size} * ${alloc_percent}) / 100) /512) *512)
            + (1024*1024*128)
        ))
    log 2 "${alloc_percent}% of ${lv_size}B = ${snap_alloc}B"
    local snap_lv_name="${lv_name}.snapshot.$(timestamp)"
    log 1 "generating snapshot ${snap_lv_name} in ${vg_name}"

    lvcreate -L${snap_alloc}B -s -n ${snap_lv_name} ${vg_name}/${lv_name} > /dev/null
    echo ${snap_lv_name}
}

function lv_remove()
{
    local vg_name=${1}
    local lv_name=${2}

    if ! echo "${lv_name}" | grep '\.snapshot\.' > /dev/null; then
        log 0 "ERROR: refusing to remove non-snapshot lv ${vg_name}/${lv_name}"
	exit 1
    fi
    log 1 "force removing snapshot: ${vg_name}/${lv_name}"
    lvremove -f ${vg_name}/${lv_name} > /dev/null
}

# MAIN

# ARGUMENTS

VG_NAME=${1}
LV_NAME=${2}

# Setup Environment

CACHEDIR=/var/cache/lvm-snapshot-backup-s3
TMPDIR=/tmp/lvm-snapshot-backup-s3
MOUNTPOINT=${TMPDIR}/${LV_NAME}


## Setup Required Directories

if [ ! -d ${CACHEDIR} ]; then
    mkdir -p ${CACHEDIR}
    chmod 700 ${CACHEDIR}
fi

if [ ! -d ${MOUNTPOINT} ]; then
    mkdir -p ${MOUNTPOINT}
    chmod 700 ${MOUNTPOINT}
fi

## Make a Snapshot

SNAP_LV_NAME=$(lv_make_snap "${VG_NAME}" "${LV_NAME}")

SNAP_DEV=/dev/${VG_NAME}/${SNAP_LV_NAME}

#mount it
if ! mount -o ro ${SNAP_DEV} ${MOUNTPOINT}; then
    log 0 "ERROR: couldn't mount ${SNAP_DEV} on ${MOUNTPOINT}"
    lv_remove "${VG_NAME}" "${SNAP_LV_NAME}"
    exit 1
fi

# Do The Backup
BACKUP_FROM="${MOUNTPOINT}"
ENCRYPT_TO=$'0B0A72DD7A25C9D61DFD20DF115D31AF95C7423D\t6B99CE97F17F48C27F722D71023A4420C7EC6914\tF8E3F2A3F1D3BA91EE3E587EE580373EDE23B6D9'
LEVEL_LIMIT=3
DESCRIPTION=$(get_backup_description "${BACKUP_FROM}")
LEVEL=$(get_curlevel "${BACKUP_FROM}")
DATE=$(date +%Y%m%d-%H%M%S)
S3_LOCATION="s3://backups.endlessm.com/lvm"
S3_URL="${S3_LOCATION}/${DESCRIPTION}/${DATE}.${LEVEL}.tar.gpg"

do_incremental_backup "${BACKUP_FROM}" "${LEVEL_LIMIT}" | \
    encrypt_stream "${ENCRYPT_TO}" | \
    upload_stream_to_s3 "${S3_URL}"

#unmount it
umount ${SNAP_DEV}

#remove the snapshot
lv_remove "${VG_NAME}" "${SNAP_LV_NAME}"

log 0 "Backup Completed"
exit 0
